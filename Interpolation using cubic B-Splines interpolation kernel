function [Spline]=KipkoechBSplinesInterpolation(ImageName,scalingFactor)
Image=ImageName; 
k=scalingFactor; 
[M,N]=size(Image); %size of image
Image=double(Image);
%calculate interpolation distances
i=0:k-1;
S1=abs([(1+i/k)' (i/k)' (1-i/k)' (2-i/k)']);
%Calculate interpolation function
U1row=zeros(k,4);
for i=1:k
for j=1:4
if S1(i,j)<1
U1row(i,j)=2/3-(1/2.*(S1(i,j)).^2.*(2-S1(i,j)));
elseif (1<=S1(i,j))<2
U1row(i,j)=1/6.*((2-S1(i,j)).^3);
else 
    U1row(i,j)=0;
end
end
end
U1col=U1row'; %Columns interpolation function
%Extend input image rows using symmetric padding
Ipt1=[Image(1,:);Image;Image(end,:);Image(M-1,:)]; 
%Interpolate rows
RowInterpIm1=zeros(k*M,N); %Initialise rows interpolated image
for i=1:M
l=k*(i-1);
RowInterpIm1(l+1:l+k,:)=U1row*Ipt1(i:i+3,:);
end
%Extend columns for image with extrapolated rows using symmetric padding
ExtendedColIm2=[RowInterpIm1(:,1) RowInterpIm1 RowInterpIm1 RowInterpIm1];
%Interpolate columns
columnInterp1=zeros(k*M,k*N); %Initialise image with ext. colmns
for i=1:N
j=k*(i-1);
columnInterp1(:,j+1:j+k)=ExtendedColIm2(:,i:i+3)*U1col;
end
%INTERPOLATION WITH RIGHT AND DOWN SHIFT
%calculate interpolation distances
i=1:k;
S2=abs([(2-(k-i)/k)' (1-(k-i)/k)' ((k-i)/k)' (1+(k-i)/k)']);
%Calculate interpolation function
U2row=zeros(k,4);
for i=1:k
for j=1:4
if S2(i,j)<1
U2row(i,j)=2/3-(1/2.*S2(i,j).^2.*(2-S2(i,j)));
elseif (1<=S2(i,j))<2
U2row(i,j)=1/6.*((2-S2(i,j)).^3);
else 
    U2row(i,j)=0;
end
end
end
U2columns=U2row'; %Columns interpolation function
%Extend input image columns using symmetric padding
Interpolation3=[Image(:,2) Image(:,1) Image Image(:,end)];
%interpolate columns
ColumnInterp=zeros(M,k*N); %Initialise columns interpolated image
for i=1:N
j=k*(i-1);
ColumnInterp(:,j+1:j+k)=Interpolation3(:,i:i+3)*U2columns;
end
%Extend rows for image with extrapolated rows using symmetric padding
Interpolation4=[ColumnInterp(2,:);ColumnInterp(1,:);ColumnInterp;ColumnInterp(end,:)];
%Interpolate rows
columnInterp2=zeros(k*M,k*N); %Initialise image with extended rows
for i=1:M
j=k*(i-1);
columnInterp2(j+1:j+k,:)=U2row*Interpolation4(i:i+3,:);
end
%Average the two interpolations
Spline=(columnInterp1+columnInterp2)./2;
%Truncate extrapolated data to within limits of input
MinValue=min(min(Image)); %Minimum value in the image
MaxValue=max(max(Image)); %Maximum value in the image
for i=1:k*M
for j=1:k*N
if Spline(i,j)<MinValue
Spline(i,j)=MinValue; 
elseif Spline(i,j)>MaxValue
Spline(i,j)=MaxValue; 
end
end
end
end
